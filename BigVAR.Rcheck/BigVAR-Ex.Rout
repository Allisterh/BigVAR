
R version 3.2.4 Patched (2016-03-16 r70387) -- "Very Secure Dishes"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "BigVAR"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "BigVAR-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('BigVAR')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("BigVAR")
> ### * BigVAR
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: BigVAR
> ### Title: Dimension Reduction Methods for Multivariate Time Series.
> ### Aliases: BigVAR BigVAR-package
> 
> ### ** Examples
> 
> data(Y)
> head(Y)
             [,1]        [,2]      [,3]
[1,] -0.006111900  0.56275313 0.2989900
[2,] -0.003724301 -0.20318473 0.7642695
[3,]  0.017435408 -0.43011107 0.4947329
[4,] -0.052851365  0.13849381 0.0501435
[5,]  0.041024267  0.05140739 0.3010214
[6,]  0.142626686  0.10749434 0.2221293
> T1=floor(nrow(Y)/3)
> T2=floor(2*nrow(Y)/3)
> m1=constructModel(Y,p=4,struct="None",gran=c(50,10),verbose=FALSE,T1=T1,T2=T2)
> plot(m1)
> results=cv.BigVAR(m1)
> plot(results)
> predict(results,n.ahead=1)
          [,1]
[1,] 0.1006522
[2,] 0.2632774
[3,] 0.1690149
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("BigVAR", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("BigVAR.est-methods")
> ### * BigVAR.est-methods
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: BigVAR.est
> ### Title: BigVAR Estimation
> ### Aliases: BigVAR.est BigVAR.est,BigVAR-method
> 
> ### ** Examples
> 
> data(Y)
> Y=Y[1:100,]
> #construct a Basic VAR-L
> Model1=constructModel(Y,p=4,struct="None",gran=c(50,10))
> BigVAR.est(Model1)
$B
, , 1

              [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12]
[1,]  5.681180e-07    0    0    0    0    0    0    0    0     0     0     0
[2,]  2.791051e-03    0    0    0    0    0    0    0    0     0     0     0
[3,] -1.056146e-01    0    0    0    0    0    0    0    0     0     0     0
     [,13]
[1,]     0
[2,]     0
[3,]     0

, , 2

              [,1] [,2] [,3]      [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11]
[1,]  5.681180e-07    0    0 0.0000000    0    0    0    0    0     0     0
[2,]  2.791051e-03    0    0 0.0000000    0    0    0    0    0     0     0
[3,] -7.340577e-02    0    0 0.2993506    0    0    0    0    0     0     0
     [,12] [,13]
[1,]     0     0
[2,]     0     0
[3,]     0     0

, , 3

              [,1] [,2] [,3]     [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11]
[1,]  5.681180e-07    0    0 0.000000    0    0    0    0    0     0     0
[2,]  2.791051e-03    0    0 0.000000    0    0    0    0    0     0     0
[3,] -5.256417e-02    0    0 0.493054    0    0    0    0    0     0     0
     [,12] [,13]
[1,]     0     0
[2,]     0     0
[3,]     0     0

, , 4

              [,1] [,2] [,3]      [,4] [,5]      [,6] [,7] [,8] [,9] [,10]
[1,]  5.681180e-07    0    0 0.0000000    0  0.000000    0    0    0     0
[2,]  2.997411e-03    0    0 0.0000000    0 -0.174359    0    0    0     0
[3,] -3.906136e-02    0    0 0.6185499    0  0.000000    0    0    0     0
     [,11] [,12] [,13]
[1,]     0     0     0
[2,]     0     0     0
[3,]     0     0     0

, , 5

              [,1] [,2]       [,3]      [,4] [,5]       [,6] [,7] [,8]
[1,]  5.681180e-07    0 0.00000000 0.0000000    0  0.0000000    0    0
[2,]  3.172551e-03    0 0.00000000 0.0000000    0 -0.3378615    0    0
[3,] -3.012930e-02    0 0.09541584 0.7040751    0  0.0000000    0    0
            [,9] [,10] [,11] [,12] [,13]
[1,]  0.00000000     0     0     0     0
[2,] -0.03212177     0     0     0     0
[3,]  0.00000000     0     0     0     0

, , 6

              [,1] [,2]      [,3]      [,4]        [,5]         [,6] [,7]
[1,]  1.660438e-06    0 0.0000000 0.0000000 -0.01269729 -0.007135822    0
[2,]  3.351646e-03    0 0.0000000 0.0000000 -0.04351786 -0.416514724    0
[3,] -2.423890e-02    0 0.2118167 0.7618829  0.00000000  0.000000000    0
           [,8]        [,9] [,10] [,11] [,12] [,13]
[1,]  0.0000000  0.00000000     0     0     0     0
[2,] -0.1765107 -0.07544713     0     0     0     0
[3,]  0.0000000  0.00000000     0     0     0     0

, , 7

              [,1] [,2]      [,3]      [,4]       [,5]        [,6] [,7]
[1,] -0.0001125293    0 0.0000000 0.0000000 -0.2196030 -0.01189475    0
[2,]  0.0033957252    0 0.0000000 0.0000000 -0.2025448 -0.37536423    0
[3,] -0.0203909986    0 0.2874348 0.7996348  0.0000000  0.00000000    0
           [,8]        [,9] [,10]     [,11] [,12] [,13]
[1,]  0.0000000  0.00000000     0 0.0000000     0     0
[2,] -0.3802225 -0.09102204     0 0.1376394     0     0
[3,]  0.0000000  0.00000000     0 0.0000000     0     0

, , 8

              [,1]       [,2]      [,3]      [,4]       [,5]        [,6] [,7]
[1,]  0.0006557676  0.0000000 0.0000000 0.0000000 -0.3502232 -0.01298821    0
[2,]  0.0034368646  0.0000000 0.0000000 0.0000000 -0.2860510 -0.34100262    0
[3,] -0.0181800822 -0.2279021 0.4106137 0.8332692  0.0000000  0.00000000    0
            [,8]       [,9] [,10]     [,11] [,12]        [,13]
[1,] -0.06401685  0.0000000     0 0.0000000     0  0.007537131
[2,] -0.51396229 -0.1039535     0 0.2666318     0  0.000000000
[3,]  0.00000000  0.0000000     0 0.0000000     0 -0.006421762

, , 9

             [,1]       [,2]      [,3]      [,4]       [,5]        [,6]
[1,]  0.002255142  0.0000000 0.0000000 0.0000000 -0.4345987 -0.01089706
[2,]  0.005028164  0.0000000 0.0000000 0.0145225 -0.3355583 -0.32624285
[3,] -0.018356585 -0.4014343 0.5047694 0.8886654  0.0000000  0.00000000
            [,7]         [,8]       [,9] [,10]     [,11] [,12]       [,13]
[1,]  0.00000000 -0.154454510  0.0000000     0 0.0000000     0  0.02255803
[2,]  0.00000000 -0.593890257 -0.1179693     0 0.3462859     0  0.00000000
[3,] -0.02487782  0.008296879  0.0000000     0 0.0000000     0 -0.03402225

, , 10

             [,1]       [,2]      [,3]       [,4]       [,5]        [,6]
[1,]  0.003196769  0.0000000 0.0000000 0.00000000 -0.4765399  0.00000000
[2,]  0.006201653  0.0000000 0.0000000 0.02526021 -0.3673723 -0.31910149
[3,] -0.018283058 -0.4778307 0.5886453 0.97625804  0.0000000 -0.04816976
           [,7]       [,8]      [,9] [,10]      [,11] [,12]       [,13]
[1,]  0.0000000 -0.2136596  0.000000     0 0.04184928     0  0.03131762
[2,]  0.0000000 -0.6430057 -0.127918     0 0.39442798     0  0.00000000
[3,] -0.1016443  0.1043996  0.000000     0 0.00000000     0 -0.04103966


$lambdas
 [1] 8.7259905 5.6498939 3.6581865 2.3685982 1.5336171 0.9929846 0.6429365
 [8] 0.4162877 0.2695375 0.1745198

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("BigVAR.est-methods", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("MultVarSim")
> ### * MultVarSim
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: MultVarSim
> ### Title: Simulate a VAR
> ### Aliases: MultVarSim
> 
> ### ** Examples
> 
> k=3;p=6
> B=matrix(0,nrow=k,ncol=p*k)
> A1<- matrix(c(.4,-.02,.01,-.02,.3,.02,.01,.04,.3),ncol=3,nrow=3)
> A2 <- matrix(c(.2,0,0,0,.3,0,0,0,.13),ncol=3,nrow=3)
> B[,1:k]=A1
> B[,(4*k+1):(5*k)]=A2
> A <- VarptoVar1MC(B,p,k)
> Y <-MultVarSim(k,A,p,.1*diag(k),100)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("MultVarSim", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("SparsityPlot.BigVAR.results-methods")
> ### * SparsityPlot.BigVAR.results-methods
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: SparsityPlot.BigVAR.results
> ### Title: Sparsity Plot of a BigVAR.results object
> ### Aliases: SparsityPlot.BigVAR.results
> ###   SparsityPlot.BigVAR.results,BigVAR.results-method
> 
> ### ** Examples
> 
> data(Y)
> Y <- Y[1:100,]
> Model1 <- constructModel(Y,p=4,struct="None",gran=c(50,10),verbose=FALSE)
> SparsityPlot.BigVAR.results(cv.BigVAR(Model1))
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("SparsityPlot.BigVAR.results-methods", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("VARXFit")
> ### * VARXFit
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: VARXFit
> ### Title: Fit a VAR or VARX model by least squares
> ### Aliases: VARXFit
> 
> ### ** Examples
> 
> data(Y)
> # fit a VAR_3(3)
> mod <- VARXFit(Y,3,NULL,NULL)
> # fit a VAR_3 with p= 6 and lag selected according to AIC
> modAIC <- VARXFit(Y,6,"AIC",NULL)
> # Fit a VARX_{2,1} with p=6, s=4 and lags selected by BIC
> modXBIC <- VARXFit(Y,6,"BIC",list(k=2,s=4))
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("VARXFit", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("VARXForecastEval")
> ### * VARXForecastEval
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: VARXForecastEval
> ### Title: Evaluate forecasts from a VAR or VARX with lag orders selected
> ###   by AIC/BIC
> ### Aliases: VARXForecastEval
> 
> ### ** Examples
> 
> data(Y)
> # fit a VAR_3(3)
> mod <- VARXFit(Y,3,NULL,NULL)
> # fit a VAR_3 with p= 6 and lag selected according to AIC
> modAIC <- VARXFit(Y,6,"AIC",NULL)
> # Fit a VARX_{2,1} with p=6, s=4 and lags selected by BIC
> modXBIC <- VARXFit(Y,6,"BIC",list(k=2,s=4))
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("VARXForecastEval", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("VarptoVar1MC")
> ### * VarptoVar1MC
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: VarptoVar1MC
> ### Title: Converts a VAR coefficient matrix of order p to multiple
> ###   companion form
> ### Aliases: VarptoVar1MC
> 
> ### ** Examples
> 
> k=3;p=6
> B=matrix(0,nrow=k,ncol=p*k)
> A1<- matrix(c(.4,-.02,.01,-.02,.3,.02,.01,.04,.3),ncol=3,nrow=3)
> A2 <- matrix(c(.2,0,0,0,.3,0,0,0,.13),ncol=3,nrow=3)
> B[,1:k]=A1
> B[,(4*k+1):(5*k)]=A2
> A <- VarptoVar1MC(B,p,k)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("VarptoVar1MC", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("constructModel")
> ### * constructModel
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: constructModel
> ### Title: Construct an object of class BigVAR
> ### Aliases: constructModel
> 
> ### ** Examples
> 
> library(BigVAR)
> # VARX Example
> # Create a Basic VARX-L with k=2, m=1, s=2, p=4
> VARX=list()
> VARX$k=2 # indicates that the first two series are modeled
> VARX$s=2 # sets 2 as the maximal lag order for exogenous series
> data(Y)
> T1=floor(nrow(Y)/3)
> T2=floor(2*nrow(Y)/3)
> Model1=constructModel(Y,p=4,struct="None",gran=c(50,10),verbose=FALSE,VARX=VARX,T1=T1,T2=T2)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("constructModel", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("cv.BigVAR-methods")
> ### * cv.BigVAR-methods
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: cv.BigVAR
> ### Title: Cross Validation for BigVAR
> ### Aliases: cv.BigVAR cv.BigVAR,BigVAR-method
> 
> ### ** Examples
> 
> data(Y)
> Y=Y[1:100,]
> # Fit a Basic VARX-L with rolling cross validation 
> Model1=constructModel(Y,p=4,struct="None",gran=c(50,10))
> results=cv.BigVAR(Model1)
Cross-Validation Stage: None  |                                                                              |                                                                      |   0%  |                                                                              |==                                                                    |   3%  |                                                                              |====                                                                  |   6%  |                                                                              |======                                                                |   9%  |                                                                              |========                                                              |  12%  |                                                                              |===========                                                           |  15%  |                                                                              |=============                                                         |  18%  |                                                                              |===============                                                       |  21%  |                                                                              |=================                                                     |  24%  |                                                                              |===================                                                   |  27%  |                                                                              |=====================                                                 |  30%  |                                                                              |=======================                                               |  33%  |                                                                              |=========================                                             |  36%  |                                                                              |============================                                          |  39%  |                                                                              |==============================                                        |  42%  |                                                                              |================================                                      |  45%  |                                                                              |==================================                                    |  48%  |                                                                              |====================================                                  |  52%  |                                                                              |======================================                                |  55%  |                                                                              |========================================                              |  58%  |                                                                              |==========================================                            |  61%  |                                                                              |=============================================                         |  64%  |                                                                              |===============================================                       |  67%  |                                                                              |=================================================                     |  70%  |                                                                              |===================================================                   |  73%  |                                                                              |=====================================================                 |  76%  |                                                                              |=======================================================               |  79%  |                                                                              |=========================================================             |  82%  |                                                                              |===========================================================           |  85%  |                                                                              |==============================================================        |  88%  |                                                                              |================================================================      |  91%  |                                                                              |==================================================================    |  94%  |                                                                              |====================================================================  |  97%  |                                                                              |======================================================================| 100%[1] "Evaluation Stage"
  |                                                                              |                                                                      |   0%  |                                                                              |==                                                                    |   3%  |                                                                              |====                                                                  |   6%  |                                                                              |======                                                                |   9%  |                                                                              |========                                                              |  12%  |                                                                              |===========                                                           |  15%  |                                                                              |=============                                                         |  18%  |                                                                              |===============                                                       |  21%  |                                                                              |=================                                                     |  24%  |                                                                              |===================                                                   |  27%  |                                                                              |=====================                                                 |  30%  |                                                                              |=======================                                               |  33%  |                                                                              |=========================                                             |  36%  |                                                                              |============================                                          |  39%  |                                                                              |==============================                                        |  42%  |                                                                              |================================                                      |  45%  |                                                                              |==================================                                    |  48%  |                                                                              |====================================                                  |  52%  |                                                                              |======================================                                |  55%  |                                                                              |========================================                              |  58%  |                                                                              |==========================================                            |  61%  |                                                                              |=============================================                         |  64%  |                                                                              |===============================================                       |  67%  |                                                                              |=================================================                     |  70%  |                                                                              |===================================================                   |  73%  |                                                                              |=====================================================                 |  76%  |                                                                              |=======================================================               |  79%  |                                                                              |=========================================================             |  82%  |                                                                              |===========================================================           |  85%  |                                                                              |==============================================================        |  88%  |                                                                              |================================================================      |  91%  |                                                                              |==================================================================    |  94%  |                                                                              |====================================================================  |  97%  |                                                                              |======================================================================| 100%> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("cv.BigVAR-methods", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("predict-methods-BigVAR.results")
> ### * predict-methods-BigVAR.results
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: predict
> ### Title: Forecast using a BigVAR.results object
> ### Aliases: predict predict,BigVAR.results-method
> 
> ### ** Examples
> 
> data(Y)
> Y=Y[1:100,]
> Model1=constructModel(Y,p=4,struct="None",gran=c(50,10),verbose=FALSE)
> results=cv.BigVAR(Model1)
> predict(results,n.ahead=1)
          [,1]
[1,] 0.1006522
[2,] 0.2632774
[3,] 0.1690149
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("predict-methods-BigVAR.results", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  3.327 0.092 0.775 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
